"""
MIT License

–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞ (—Å) 2022 - 2024 Tasfers
–ê–≤—Ç–æ—Ä—Å–∫–æ–µ –ø—Ä–∞–≤–æ (c) 2022 - –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Lumix

–ù–∞—Å—Ç–æ—è—â–∏–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ª—é–±–æ–º—É –ª–∏—Ü—É, 
–ø–æ–ª—É—á–∏–≤—à–µ–º—É –∫–æ–ø–∏—é —ç—Ç–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å 
–Ω–∏–º —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–¥–∞–ª–µ–µ - "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ"), 
–æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π,
–≤–∫–ª—é—á–∞—è, –Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è—Å—å, –ø—Ä–∞–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è,
–∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–ª–∏—è–Ω–∏—è, –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è, –Ω–æ —Å –∑–∞–ø—Ä–µ—Ç–æ–º –ø—Ä–æ–¥–∞–∂–∏,
–ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å—É–±–ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ø–∏–π –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è,
–∞ —Ç–∞–∫–∂–µ –ª–∏—Ü–∞–º, –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ, –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏–π:

–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—ã—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤–∞—Ö
–∏ —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã –≤–æ –≤—Å–µ
–∫–æ–ø–∏–∏ –∏–ª–∏ –∑–Ω–∞—á–∏–º—ã–µ —á–∞—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è.

–ü–†–û–ì–†–ê–ú–ú–ù–û–ï –û–ë–ï–°–ü–ï–ß–ï–ù–ò–ï –ü–†–ï–î–û–°–¢–ê–í–õ–Ø–ï–¢–°–Ø "–ö–ê–ö –ï–°–¢–¨",
–ë–ï–ó –ö–ê–ö–ò–•-–õ–ò–ë–û –ì–ê–†–ê–ù–¢–ò–ô, –Ø–í–ù–´–• –ò–õ–ò –ü–û–î–†–ê–ó–£–ú–ï–í–ê–ï–ú–´–•,
–í–ö–õ–Æ–ß–ê–Ø, –ù–û –ù–ï –û–ì–†–ê–ù–ò–ß–ò–í–ê–Ø–°–¨, –ì–ê–†–ê–ù–¢–ò–ò –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ô –¶–ï–ù–ù–û–°–¢–ò,
–ü–†–ò–ì–û–î–ù–û–°–¢–ò –î–õ–Ø –ö–û–ù–ö–†–ï–¢–ù–û–ô –¶–ï–õ–ò –ò –ù–ï–ù–ê–†–£–®–ï–ù–ò–Ø.

–í –ù–ò–ö–ê–ö–û–ú –°–õ–£–ß–ê–ï –ê–í–¢–û–†–´ –ò–õ–ò –ü–†–ê–í–û–û–ë–õ–ê–î–ê–¢–ï–õ–ò 
–ù–ï –ù–ï–°–£–¢ –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò –ó–ê –õ–Æ–ë–´–ï –ò–°–ö–ò,
–£–ë–´–¢–ö–ò –ò–õ–ò –î–†–£–ì–ò–ï –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò, 
–ë–£–î–¨ –¢–û –í –î–ï–ô–°–¢–í–ò–ò –î–û–ì–û–í–û–†–ê, –ü–†–ê–í–û–ù–ê–†–£–®–ï–ù–ò–Ø –ò–õ–ò –ò–ù–ê–ß–ï,
–í–û–ó–ù–ò–ö–ê–Æ–©–ò–ï –ò–ó, –ò–õ–ò –í –°–í–Ø–ó–ò –° –ü–†–û–ì–†–ê–ú–ú–ù–´–ú –û–ë–ï–°–ü–ï–ß–ï–ù–ò–ï–ú
–ò–õ–ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï–ú –ò–õ–ò –î–†–£–ì–ò–ú–ò –î–ï–õ–ê–ú–ò –í –ü–†–û–ì–†–ê–ú–ú–ù–û–ú –û–ë–ï–°–ü–ï–ß–ï–ù–ò–ò.



MIT License

Copyright (c) 2022 - 2024 Tasfers
Copyright (c) 2022 - present development of Lumix

Permission is hereby granted free of charge to any person
who has received a copy of this software and related
documentation files (hereinafter referred to as the "Software")
to carry out operations with the Software without restrictions,
including, but not limited to, the right to use, copy,
modify, merge, publish, distribute, but with a prohibition of sale,
licensing and sublicensing copies of the Software,
as well as to the persons to whom the Software is provided, subject to the following conditions:

The above copyright notice
and this permission must be included in all
copies or significant parts of the software.

THE SOFTWARE IS PROVIDED "AS IS",
WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING, BUT NOT LIMITED TO, GUARANTEES OF COMMERCIAL VALUE,
SUITABILITY FOR
"""

import disnake
from disnake.ext import commands
import aiohttp
from db import SQLITE
from googletrans import Translator

db = SQLITE("database.db")
animal_list = ['–õ–∏—Å–∞', '–ö–æ—à–∫–∞', '–°–æ–±–∞–∫–∞', '–ü—Ç–∏—Ü–∞', '–ö–æ–∞–ª–∞', '–ö–µ–Ω–≥—É—Ä—É', '–ï–Ω–æ—Ç']

async def translator(word, lang_server):
    return Translator().translate(word, dest = lang_server)

class ApiRequester(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.persistent_views_added = False

    API_URL = 'https://some-random-api.com/canvas/'
    CHOICES = {
        '–°–µ–ø–∏—è': ['sepia?avatar={0}'], 
        '–†–∞–¥—É–≥–∞': ['gay?avatar={0}'], 
        '–°—Ç–µ–∫–ª–æ': ['glass?avatar={0}'], 
        '–ü–∏–∫—Å–µ–ª–∏': ['pixelate?avatar={0}'], 
        '–•–æ–ª–æ–¥': ['blurple?avatar={0}'], 
        '–ú–æ–Ω–æ—Ö—Ä–æ–º': ['threshold?avatar={0}'], 
        '–°–≤–µ—Ç–ª—ã–π': ['brightness?avatar={0}']
    }

    @commands.slash_command(description="üîß –£—Ç–∏–ª–∏—Ç—ã | –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –∞–≤–∞—Ç–∞—Ä–∫–∏")
    async def filter(
            self, inter, 
            filter: str = commands.Param(
                name="—Ñ–∏–ª—å—Ç—Ä", 
                description="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä", 
                choices=list(CHOICES.keys()
                )
            ),
        member: disnake.Member = commands.Param(
            name="–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 
            description="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
        ):
        try:
            await inter.response.defer()
            lang = await db.get(f"lang_{inter.guild.id}") or "ru"
            message = {
                'ru': '–†–µ–∑—É–ª—å—Ç–∞—Ç:',
                'en': 'Result:',
                'uk': '–†–µ–∑—É–ª—å—Ç–∞—Ç:'
            }[lang]
            embed = disnake.Embed(title=message, color=0x2b2d31)
            data = self.CHOICES[filter][0].format(member.display_avatar.url)
            resp = self.API_URL + data
            embed.set_image(url=resp)
            await inter.send(embed=embed)
        except Exception as e:
            message = {
                'ru': {
                    'title': '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...',
                    'description': '–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä'
                },
                'en': {
                    'title': 'Something went wrong...',
                    'description': 'There was a problem when sending a request to the server'
                },
                'uk': {
                    'title': '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫...',
                    'description': ''
                }
            }
            embed = disnake.Embed(
                title=message[lang]['title'],
                description=message[lang]['description'])
            await inter.edit_original_message(embed=embed, color=0x2b2d31)


    @commands.slash_command(description="üòÄ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è | –í—ã–≤–æ–¥–∏—Ç —Ä–∞–Ω–¥–æ–º–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤—ã–±—Ä–∞–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ")
    async def animal(
            self, inter, 
            animal: str = commands.Param(
                name="–∂–∏–≤–æ—Ç–Ω–æ–µ", 
                description="–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ", 
                choices={'–õ–∏—Å–∞': 'fox', 
                         '–ï–Ω–æ—Ç': 'raccoon', 
                         '–ö–æ—à–∫–∞': 'cat', 
                         '–°–æ–±–∞–∫–∞':'dog',
                         '–ü—Ç–∏—Ü–∞': 'bird',
                         '–ö–µ–Ω–≥—É—Ä—É': 'kangaroo',
                         '–ö–æ–∞–ª–∞': 'koala'}
            )
        ):
        await inter.response.defer()
        lang = db.get(f"lang_{inter.guild.id}") or "ru"
        nfakt = {
            'ru': '–§–∞–∫—Ç:',
            'en': 'Fact:',
            'uk': '–§–∞–∫—Ç:'
        }[lang]
        try:
            async with aiohttp.request("GET", f"https://some-random-api.com/animal/{animal}") as resp:
                data = await resp.json()
            word = data['fact']
            fact = await translator(word, lang)
            embed = disnake.Embed(description=f"**{nfakt}** {fact}", color=0x2b2d31)
            embed.set_image(url=data['image'])
            await inter.send(embed=embed)
        except Exception as e:
            message = {
                'ru': {
                    'title': '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...',
                    'description': '–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä'
                },
                'en': {
                    'title': 'Something went wrong...',
                    'description': 'There was a problem when sending a request to the server'
                },
                'uk': {
                    'title': '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫...',
                    'description': '–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä'
                }
            }
            embed = disnake.Embed(title=message[lang]['title'], description=message[lang]['description'])
            await inter.send(embed=embed, color=0x2b2d31)


def setup(bot):
    bot.add_cog(ApiRequester(bot))
